version: '3.8'

services:
  # PostgreSQL Database
  postgres:
    image: postgres:14
    environment:
      POSTGRES_DB: freelance_db
      POSTGRES_USER: user
      POSTGRES_PASSWORD: password
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U user -d freelance_db"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Redis Cache
  redis:
    image: redis:7-alpine
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Backend API
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    ports:
      - "8001:8001"
    environment:
      - DATABASE_URL=postgresql://user:password@postgres:5432/freelance_db
      - REDIS_HOST=redis://redis:6379
      - ENV=development
      # AI/ML Configuration
      - AI_MATCHING_ENABLED=true
      - EMBEDDING_MODEL=sentence-transformers/all-MiniLM-L6-v2
      - SKILLS_VERIFICATION_ENABLED=true
      - REPUTATION_V2_ENABLED=true
      - MATCHING_CACHE_TTL=3600
      # OAuth Configuration
      - OAUTH_ENCRYPTION_KEY=your-32-byte-encryption-key-here
      - SLACK_CLIENT_ID=your-slack-client-id
      - SLACK_CLIENT_SECRET=your-slack-client-secret
      - JIRA_CLIENT_ID=your-jira-client-id
      - JIRA_CLIENT_SECRET=your-jira-client-secret
      - TRELLO_CLIENT_ID=your-trello-client-id
      - TRELLO_CLIENT_SECRET=your-trello-client-secret
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    volumes:
      - ./backend:/app
    command: uvicorn app.main:app --host 0.0.0.0 --port 8001 --reload

  # Frontend
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    ports:
      - "3000:3000"
    environment:
      - NEXT_PUBLIC_API_URL=http://localhost:8001/api/v1
    depends_on:
      - backend
    volumes:
      - ./frontend:/app
      - /app/node_modules
    command: npm run dev

  # RQ Worker for Background Jobs
  rq-worker:
    build:
      context: ./backend
      dockerfile: Dockerfile
    environment:
      - DATABASE_URL=postgresql://user:password@postgres:5432/freelance_db
      - REDIS_HOST=redis://redis:6379
      - ENV=development
      # AI/ML Configuration
      - AI_MATCHING_ENABLED=true
      - EMBEDDING_MODEL=sentence-transformers/all-MiniLM-L6-v2
      - SKILLS_VERIFICATION_ENABLED=true
      - REPUTATION_V2_ENABLED=true
      - MATCHING_CACHE_TTL=3600
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    volumes:
      - ./backend:/app
    command: python -m rq worker --url redis://redis:6379

  # RQ Dashboard for Job Monitoring
  rq-dashboard:
    build:
      context: ./backend
      dockerfile: Dockerfile
    ports:
      - "9181:9181"
    environment:
      - REDIS_HOST=redis://redis:6379
    depends_on:
      redis:
        condition: service_healthy
    volumes:
      - ./backend:/app
    command: rq-dashboard --redis-url redis://redis:6379 --port 9181 --bind 0.0.0.0

  # Hardhat Node (for local blockchain development)
  hardhat:
    image: node:18-alpine
    working_dir: /app
    ports:
      - "8545:8545"
    volumes:
      - ./contracts:/app
    command: sh -c "npm install && npx hardhat node --hostname 0.0.0.0"

volumes:
  postgres_data:
  redis_data: 