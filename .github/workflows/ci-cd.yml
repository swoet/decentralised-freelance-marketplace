name: CI/CD

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

jobs:
  test-backend:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: [3.10]
    steps:
      - uses: actions/checkout@v3
      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}
      - name: Install dependencies
        run: |
          cd backend
          pip install -r requirements.txt
      - name: Lint
        run: |
          cd backend
          pip install flake8
          flake8 app
      - name: Test
        run: |
          cd backend
          pytest

  test-frontend:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        node-version: [18.x]
    steps:
      - uses: actions/checkout@v3
      - name: Use Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v3
        with:
          node-version: ${{ matrix.node-version }}
          cache: 'npm'
      - name: Install dependencies
        run: |
          cd frontend
          npm ci
      - name: Lint
        run: |
          cd frontend
          npm run lint
      - name: Test
        run: |
          cd frontend
          npm run test
      - name: Build
        run: |
          cd frontend
          npm run build

  test-contracts:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: Use Node.js 18.x
        uses: actions/setup-node@v3
        with:
          node-version: 18.x
          cache: 'npm'
      - name: Install dependencies
        run: |
          cd contracts
          npm ci
      - name: Test
        run: |
          cd contracts
          npx hardhat test

  deploy:
    needs: [test-backend, test-frontend, test-contracts]
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    steps:
      - uses: actions/checkout@v3
      - name: Set up kubectl
        uses: azure/setup-kubectl@v3
        with:
          version: 'latest'
      - name: Set up Kubeconfig
        run: echo "$KUBECONFIG_DATA" | base64 --decode > kubeconfig && export KUBECONFIG=$(pwd)/kubeconfig
        env:
          KUBECONFIG_DATA: ${{ secrets.KUBECONFIG_DATA }}
      - name: Deploy Backend
        run: kubectl apply -f k8s-backend.yaml
      - name: Deploy Frontend
        run: kubectl apply -f k8s-frontend.yaml
      - name: Deploy Support Services
        run: kubectl apply -f k8s-support.yaml 